{"version":3,"sources":["features/exchange/exchangeSlice.ts","features/transaction/transactionSlice.ts","utils/index.ts","features/rates/ratesSlice.ts","features/wallet/walletSlice.ts","api/index.ts","components/NumericInput.tsx","components/CurrenciesMenu.tsx","components/CurrencySelectInput.tsx","features/exchange/CommonCurrencyField.tsx","features/exchange/CurrencyFromField.tsx","features/transaction/TxNotification.tsx","features/exchange/CurrencyToField.tsx","features/exchange/ExchangeButton.tsx","features/rates/RatesWidget.tsx","app/CurrencyExchange.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["initialState","from","to","amountSend","amountReceive","rate","formatError","reverse","amountFrom","amountTo","exchange","createSlice","name","reducers","format","state","action","length","toFixed","setFrom","payload","setTo","setAmountFrom","parseAmount","currencyMultiply","setAmountTo","currencyDivide","extraReducers","builder","addCase","tx","pending","updateRates","rates","concat","Infinity","actions","selectToCurrency","selectToAmount","selectSendAmount","selectToIsError","fieldHasError","selectFromCurrency","selectFromAmount","selectReceiveAmount","selectFromIsError","selectTransaction","get","put","status","createAsyncThunk","thunkAPI","a","confirmTransaction","transaction","idle","undefined","rejectinReason","meta","arg","fulfilled","confirmed","reason","rejected","selectTxReady","selectRejectinReason","valRegex","amount","parsed","parseFloat","isNaN","match","Math","round","currencyAdd","delta","floor","currencySubtract","ceil","currencies","update","refreshRates","dispatch","base","symbols","exchangeRatesAPI","pairs","selectRates","wallets","USD","EUR","GBP","fromAmount","toAmount","selectBalances","wallet","selectBalancesAsArray","createSelector","balances","Object","keys","reduce","acc","code","push","API_URL","prepareURL","url","params","urlParams","URLSearchParams","toString","fetch","join","then","resp","json","response","codes","Promise","resolve","setTimeout","useStyles","makeStyles","theme","createStyles","input","paddingRight","textAlign","keysRegex","NumericInput","props","id","value","currency","onCurrencyClick","onBlur","onChange","classes","currencyButton","InputAdornment","position","Button","onClick","Input","startAdornment","e","inputString","target","onKeyPress","key","preventDefault","CurrenciesMenu","React","memo","anchorEl","onClose","open","Menu","keepMounted","map","option","MenuItem","selected","label","prevProps","nextProps","CurrencySelectInput","helper","error","onCurrencySet","useState","setAnchorEl","menuOpen","Boolean","helperTextId","Paper","elevation","FormControl","InputLabel","htmlFor","shrink","event","currentTarget","Fragment","FormHelperText","selectCurrencies","balanes","it","CommonCurrencyField","setAmount","setCurrency","selectError","selectCurrency","selectAmount","balance","useSelector","balanceSelector","useDispatch","_","CurrencyFromField","TxNotification","rejectedReason","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","message","CurrencyToField","selectAvailableBalance","isValidTxSelector","txIdle","hasFunds","ExchangeButton","valid","Fab","variant","color","disabled","selectActualRate","RatesWidget","fromCurrency","toCurrency","useEffect","setInterval","clearInterval","Chip","root","flexGrow","paper","padding","spacing","CurrencyExchange","className","Grid","container","item","xs","sm","App","AppBar","Toolbar","Typography","Container","component","maxWidth","rootReducer","combineReducers","ratesReducer","walletReducer","exchangeReducer","transactionReducer","store","configureStore","reducer","require","default","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6c0f3cc.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from 'app/rootReducer';\nimport { update as updateRates } from 'features/rates/ratesSlice';\nimport { tx } from 'features/transaction/transactionSlice';\nimport { parseAmount, currencyMultiply, currencyDivide } from 'utils';\n\ninterface ExchangeState {\n  from: string,\n  to: string,\n  amountSend: number,\n  amountReceive: number,\n  rate: number,\n  formatError: string | null,\n  reverse: boolean,             // user type into receive field\n  amountFrom: string,\n  amountTo: string\n}\n\nconst initialState: ExchangeState = {\n  from: 'GBP',\n  to: 'EUR',\n  amountSend: 0,\n  amountReceive: 0,\n  rate: 0,\n  formatError: null,\n  reverse: false,\n  amountFrom: '',\n  amountTo: ''\n};\n\nconst exchange = createSlice({\n  name: 'exchange',\n  initialState,\n  reducers: {\n    format(state: ExchangeState, action: PayloadAction) {\n      if ( state.formatError ) {\n        return;\n      }\n      if ( state.reverse ) {\n        state.amountTo = state.amountTo.length\n          ? state.amountReceive.toFixed(2)\n          : state.amountTo;\n      } else {\n        state.amountFrom = state.amountFrom.length\n          ? state.amountSend.toFixed(2)\n          : state.amountFrom;\n      }\n    },\n\n    setFrom(state: ExchangeState, action: PayloadAction<string>) {\n      if ( state.to === action.payload ) {\n        state.to = state.from;\n      }\n      state.from = action.payload;\n    },\n\n    setTo(state: ExchangeState, action: PayloadAction<string>) {\n      if ( state.from === action.payload ) {\n        state.from = state.to;\n      }\n      state.to = action.payload;\n    },\n\n    setAmountFrom(state: ExchangeState, action: PayloadAction<string>) {\n      state.amountFrom = action.payload;\n      state.reverse = false;\n      const amountSend = parseAmount(state.amountFrom);\n      if (amountSend == null) {\n        state.formatError = 'format error';\n        return;\n      } else {\n        state.formatError = null;\n        state.amountSend = amountSend;\n      }\n      state.amountReceive = currencyMultiply(state.amountSend, state.rate);\n      state.amountTo = state.amountReceive.toFixed(2);\n    },\n\n    setAmountTo(state: ExchangeState, action: PayloadAction<string>) {\n      state.amountTo = action.payload;\n      state.reverse = true;\n      const amountTo = parseAmount(state.amountTo);\n      if (amountTo == null) {\n        state.formatError = 'format error';\n        return;\n      } else {\n        state.formatError = null;\n        state.amountReceive = amountTo;\n      }\n      if ( state.rate === 0 ) {\n        state.amountSend = 0;\n        state.amountFrom = '';\n        return;\n      }\n      state.amountSend = currencyDivide(amountTo, state.rate);\n      state.amountFrom = state.amountSend.toFixed(2);\n    }\n  },\n\n  extraReducers: builder => {\n    builder.addCase( tx.pending, (state: ExchangeState, action) => {\n      /// reseting form as TX was send\n      state.amountSend = initialState.amountSend;\n      state.amountReceive = initialState.amountReceive;\n      state.formatError = initialState.formatError;\n      state.reverse = initialState.reverse;\n      state.amountFrom = initialState.amountFrom;\n      state.amountTo  = initialState.amountTo;\n    });\n\n    builder.addCase( updateRates, (state: ExchangeState, action) => {\n      const { payload: rates } = action;\n\n      let rate: number = rates[state.from.concat(state.to)];\n      if ( !rate || rate === Infinity || rate === -Infinity ) {\n        rate = 1 / rates[state.to.concat(state.from)];\n      }\n\n      // set rate if found\n      if ( rate && !(rate === Infinity || rate === -Infinity) ) {\n        state.rate = rate;\n      } else {\n        return;\n      }\n\n      // input has error - done\n      if( state.formatError ) {\n        return;\n      }\n\n      if ( state.reverse ) {\n        // recalculate send ammount\n        state.amountSend = state.amountReceive && currencyDivide(state.amountReceive, rate);\n        state.amountFrom = (state.amountFrom.length !== 0 || state.amountSend)\n          ? state.amountSend.toFixed(2)\n          : '';\n      } else {\n        // recalculate receive amount\n        state.amountReceive = currencyMultiply(state.amountSend, rate);\n        state.amountTo = (state.amountTo.length !== 0 || state.amountReceive)\n          ? state.amountReceive.toFixed(2)\n          : '';\n      }\n    });\n  }\n});\n\nexport default exchange.reducer;\n\nexport const {\n  format,\n  setFrom,\n  setAmountFrom,\n  setTo,\n  setAmountTo\n} = exchange.actions;\n\nexport const selectToCurrency = (state: RootState) =>\n  state.exchange.to;\n\nexport const selectToAmount = (state: RootState) =>\n  state.exchange.amountTo;\n\nexport const selectSendAmount = (state: RootState) =>\n  state.exchange.amountSend;\n\nexport const selectToIsError = (state: RootState) =>\n  (state.exchange.reverse || null) && state.exchange.formatError;\n\nexport const fieldHasError = (state: RootState) =>\n  state.exchange.formatError;\n\nexport const selectFromCurrency = (state: RootState) =>\n  state.exchange.from;\n\nexport const selectFromAmount = (state: RootState) =>\n  state.exchange.amountFrom;\n\nexport const selectReceiveAmount = (state: RootState) =>\n  state.exchange.amountReceive;\n\nexport const selectFromIsError = (state: RootState) =>\n  (!state.exchange.reverse || null) && state.exchange.formatError;\n\nexport const selectTransaction = (state: RootState) => ({\n  from: state.exchange.from,\n  to: state.exchange.to,\n  get: state.exchange.amountSend,\n  put: state.exchange.amountReceive\n});\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from 'app/rootReducer';\nimport { confirmTransaction } from 'api';\n\nexport type TxStatus = 'IDLE' | 'PENDING' | 'CONFIRMED' | 'REJECTED';\n\nexport type Transaction = {\n  from: string,\n  to: string,\n  get: number,\n  put: number\n}\n\nexport type TxConfirmation = {\n  tx: Transaction,\n  confirmed: boolean,\n  reason?: string\n}\n\nexport interface TransactionState {\n  status: TxStatus,\n  tx?: Transaction,\n  rejectinReason?: string\n}\n\nconst initialState: TransactionState = {\n  status: 'IDLE'\n};\n\nexport const tx = createAsyncThunk(\n  'transaction/send',\n  async (tx: Transaction, thunkAPI) =>\n    await confirmTransaction(tx)\n);\n\nconst transaction = createSlice({\n  name: 'transaction',\n  initialState,\n  reducers: {\n    idle(state: TransactionState, action: PayloadAction) {\n      state.status = initialState.status;\n      state.tx = undefined;\n      state.rejectinReason = undefined;\n    }\n  },\n  extraReducers: builder => {\n\n    builder.addCase( tx.pending, (state, action) => {\n      if (state.status === 'IDLE' || state.status === 'CONFIRMED') {\n        state.tx = action.meta.arg;\n        state.status = 'PENDING';\n      }\n    });\n\n    builder.addCase(tx.fulfilled, (state, action) => {\n      const { payload } = action;\n      if (state.status === 'PENDING') {\n        state.status = payload.confirmed ? 'CONFIRMED' : 'REJECTED';\n        if( !payload.confirmed ) {\n          state.rejectinReason = payload.reason;\n        }\n      }\n    });\n\n    builder.addCase(tx.rejected, (state, action) => {\n      if (state.status === 'PENDING') {\n        state.status = 'REJECTED';\n      }\n    });\n\n  }\n});\n\nexport default transaction.reducer;\n\nexport const { idle } = transaction.actions;\n\nexport const selectTxReady = (state: RootState) => (\n  state.transaction.status === 'IDLE'\n  || state.transaction.status === 'CONFIRMED'\n);\nexport const selectRejectinReason = (state: RootState) =>\n  state.transaction.rejectinReason;\n","const valRegex = /^([0-9])*(?:\\.[0-9]{0,2})?$/;\n\nexport const parseAmount = (amount: string): number | null => {\n  if(!amount.length){\n    return 0;\n  }\n  const parsed = parseFloat(amount);\n  if( isNaN(parsed) ){\n    return null;\n  }\n  if( !amount.match(valRegex) ){\n    return null;\n  }\n  return Math.round(parsed*100)/100;\n};\n\n/// Safe add numbers with 2 digits in decimal part:\n/// work-around rounding error in floats\n/// eg 1.001 + 2.002 = 3.00 (round to 2 digits after dot)\nexport const currencyAdd = (amount: number, delta: number): number => {\n  return Math.floor(( amount * 100 ) + ( delta * 100 ) ) / 100;\n};\n/// Safe substract numbers with 2 digits in decimal part\nexport const currencySubtract = (amount: number, delta: number): number => {\n  return ((((( amount * 1000 ) | 0 ) // take till 3 digit after dot, drop float\n      - ( delta * 1000 | 0) )        // same for second argument and subtract\n    / 10 ) | 0)                      // drop one insignificant digit, leave two\n    / 100;                           // cents to fractional part\n};\n\n\n/// Safe multiply and divide numbers: work-around rounding error in floats\nexport const currencyMultiply = (amount: number, rate: number): number => {\n  return Math.floor( amount * rate * 100 ) / 100;\n};\n\nexport const currencyDivide = (amount: number, rate: number): number => {\n  return Math.ceil( amount / rate * 100 ) / 100;\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { RootState } from 'app/rootReducer';\nimport { AppDispatch } from 'app/store';\nimport { exchangeRatesAPI } from 'api';\n\ntype Currency = {\n  code: string,                 // ISO 4217 code\n  symbol: string,               // Unicode symbol (if any)\n  name: string                  // eg. US Dollar\n}\n\ntype CurrencyPair = [\n  string,                       // Two ISO 4217 codes\n  number                        // exchange rate\n];\n\ntype CurrencyPairs = {\n  [fromto: string]: number\n}\n\ninterface RatesState {\n  currencies: Currency[],\n  rates: CurrencyPairs\n}\n\nconst initialState: RatesState = {\n  currencies: [],\n  rates: {}\n};\n\nconst rates = createSlice({\n  name: 'rates',\n  initialState,\n  reducers: {\n    update(state:RatesState, action:PayloadAction<CurrencyPairs>) {\n      state.rates = {...state.rates, ...action.payload};\n    }\n  }\n});\n\nexport default rates.reducer;\n\nexport const {\n  update\n} = rates.actions;\n\nexport async function refreshRates(\n  dispatch: AppDispatch,\n  base: string,\n  symbols: string[]\n) {\n  const pairs = await exchangeRatesAPI(base, symbols);\n  dispatch(update(pairs));\n}\n\nexport const selectRates = (state: RootState) =>\n  state.rates.rates;\n\nexport const selectCurrencies = (state: RootState) =>\n  state.rates.currencies;\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\n\nimport { RootState } from 'app/rootReducer';\nimport { tx } from 'features/transaction/transactionSlice';\nimport { currencySubtract, currencyAdd } from 'utils';\n\ntype Wallet = {\n  code: string,\n  amount: number\n}\n\ninterface WalletState {\n  [code: string]: number\n}\n\nconst initialState: WalletState = {\n  USD: 1000,\n  EUR: 1000,\n  GBP: 9001\n};\n\nconst wallets = createSlice({\n  name: 'wallets',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(tx.fulfilled, (state: WalletState, action) => {\n      const { payload } = action;\n      if( payload.confirmed ) {\n        const { from, to, get, put } = action.payload.tx;\n        const fromAmount = currencySubtract( state[from], get );\n        const toAmount = currencyAdd( state[to], put );\n        state[from] = fromAmount;\n        state[to] = toAmount;\n      }\n    });\n  }\n});\n\nexport default wallets.reducer;\n\nexport const selectBalances = (state: RootState): WalletState =>\n  state.wallet;\n\nexport const selectBalancesAsArray = createSelector(\n  selectBalances,\n  balances => Object.keys(balances)\n    .reduce((acc: Wallet[], code: string) => {\n      acc.push({\n        code,\n        amount: balances[code]\n      } as Wallet);\n      return acc;\n    }, [] as Wallet[])\n  );\n","import { Transaction, TxConfirmation } from 'features/transaction/transactionSlice';\n\nconst API_URL = 'https://api.exchangeratesapi.io/latest';\n\nfunction prepareURL(url: string, params: Record<string, string>) {\n  const urlParams = (new URLSearchParams(params)).toString();\n  return `${url}?${urlParams}`;\n}\n\nexport async function exchangeRatesAPI(base: string, symbols: string[]): Promise<Record<string, number>> {\n  const response =\n    await fetch(prepareURL(API_URL, {base, symbols: symbols.join() }))\n      .then( resp => resp.json() );\n  const {rates} = response;\n  const codes = Object.keys(rates);\n  const pairs = codes.reduce((acc, code) => {\n    acc[base.concat(code)] = rates[code];\n    return acc;\n  }, {} as {[_: string]: number});\n  return pairs;\n}\n\n/// TODO:\n/// Should be replaced with real tx-confirming API\n/// currenly simply return automatic confirmation in 1 sec\nexport async function confirmTransaction(tx: Transaction): Promise<TxConfirmation> {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  const confirmed = true;\n  return await Promise.resolve({\n    tx,\n    confirmed\n  });\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nexport interface NumericInputProps {\n  id: string,\n  value: string,\n  currency: string,\n  onCurrencyClick?: React.MouseEventHandler,\n  onFocus?: React.FocusEventHandler,\n  onBlur?: React.FocusEventHandler,\n  onChange?: ( _: string ) => void,\n}\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  input: {\n    paddingRight: '2px',\n    textAlign: 'right'\n  }\n}));\n\nconst keysRegex = /[.0-9]/;\n\nexport function NumericInput (props: NumericInputProps) {\n  const {id, value, currency, onCurrencyClick, onBlur, onChange} = props;\n  const classes = useStyles();\n  const currencyButton = props.currency\n    ? <InputAdornment position='start' >\n        <Button onClick={onCurrencyClick}>{currency}</Button>\n      </InputAdornment>\n    : null;\n\n  const handleKeyPress:React.KeyboardEventHandler = e => {\n    if (!e.key.match(keysRegex)) {\n      e.preventDefault();\n    }\n  };\n\n  const handleChange:React.ChangeEventHandler<HTMLInputElement> = (e)=>{\n    const inputString = e.target.value;\n    onChange && onChange(inputString);\n  };\n\n  return(\n    <Input\n      id={id}\n      classes={{input: classes.input}}\n      startAdornment={currencyButton}\n      value={value}\n      onBlur={onBlur}\n      onChange={handleChange}\n      onKeyPress={handleKeyPress} />\n  );\n}\n","import React from 'react';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport type MenuItem = {\n  value: string,\n  label?: string\n}\n\nexport interface CurrencyMenuProps {\n  anchorEl: Element | ((element: Element) => Element) | null | undefined,\n  onClose: () => void,\n  open: boolean,\n  currencies?: MenuItem[],\n  currency: string,\n  onClick: (value: string) => void\n}\n\nexport const CurrenciesMenu = React.memo(function CurrenciesMenuComponent(props: CurrencyMenuProps): React.ReactElement {\n  const {\n    anchorEl,\n    onClose,\n    open,\n    currencies,\n    currency,\n    onClick\n  } = props;\n  return (\n    <Menu\n      anchorEl={anchorEl}\n      keepMounted\n      open={open}\n      onClose={onClose}>\n      {(currencies || []).map((option: MenuItem) => (\n        <MenuItem\n          key={ option.value }\n          selected={ option.value === currency }\n          onClick={() => onClick(option.value)}\n          >\n          {option.value} {option.label}\n        </MenuItem>\n      ))}\n    </Menu>)\n}, ( prevProps, nextProps ) => !nextProps.anchorEl && !prevProps.anchorEl );\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nimport { NumericInput } from './NumericInput';\nimport { CurrenciesMenu, MenuItem } from './CurrenciesMenu';\n\ninterface CurrencySelectInputProps {\n  id: string,\n  error?: boolean,\n  currency: string,\n  amount?: string,\n  label?: string,\n  helper?: string, // rate or balance\n  currencies?: MenuItem[]\n  onChange: (amount: string) => void,\n  onCurrencySet: (code: string) => void,\n  onBlur: () => void\n}\n\nexport default function CurrencySelectInput(props: CurrencySelectInputProps) {\n  const {\n    id,\n    amount,\n    helper,\n    label,\n    error,\n    onBlur,\n    onChange,\n    onCurrencySet,\n    currency,\n    currencies\n  } = props;\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const menuOpen = Boolean(anchorEl);\n  const handleMenuOpen = (event:any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuItemClick = (code: string) => {\n    onCurrencySet(code);\n    setAnchorEl(null);\n  };\n\n  const helperTextId = helper && `${id}-helper-text`;\n  const inputLabelId = label && `${id}-label`;\n\n  return (\n    <Paper elevation={0} >\n\n      <FormControl error={error}>\n        <InputLabel id={helperTextId} htmlFor={id} shrink>{label}</InputLabel>\n\n        <NumericInput\n          id={id}\n          value={amount || ''}\n          currency={currency}\n          onCurrencyClick={handleMenuOpen}\n          onChange={onChange}\n          onBlur={onBlur}\n          />\n\n        <React.Fragment>\n          {\n            helper\n              ? <FormHelperText id={helperTextId}>{helper}</FormHelperText>\n              : null\n          }\n        </React.Fragment>\n\n        {(currencies && currencies.length)\n          ? <CurrenciesMenu\n              onClose={handleMenuClose}\n              anchorEl={anchorEl}\n              open={menuOpen}\n              currencies={currencies}\n              currency={currency}\n              onClick={handleMenuItemClick}\n            />\n          : null\n        }\n      </FormControl>\n    </Paper>\n  );\n\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport { RootState } from 'app/rootReducer';\nimport CurrencySelectInput from 'components/CurrencySelectInput';\nimport {\n  selectBalances,\n  selectBalancesAsArray\n} from 'features/wallet/walletSlice';\n\nimport {\n  format,\n  setFrom,\n  fieldHasError,\n  setAmountFrom,\n  selectFromAmount,\n  selectFromCurrency\n} from 'features/exchange/exchangeSlice';\n\nconst selectCurrencies = createSelector(\n  selectBalancesAsArray,\n  balanes => balanes.map(it => ({\n    label: it.amount.toFixed(2),\n    value: it.code\n  }))\n);\n\nconst balanceSelector = (selectCurrency: (state: RootState) => string) =>\n  createSelector(\n    selectBalances,\n    selectCurrency,\n    (balances, code) => ''.concat(balances[code].toFixed(2), ' ', code)\n  );\n\ninterface CommonCurrencyFieldProps {\n  id: string,\n  label: string,\n  setAmount: typeof setAmountFrom,\n  setCurrency: typeof setFrom,\n  selectError: typeof fieldHasError,\n  selectCurrency: typeof selectFromCurrency,\n  selectAmount: typeof selectFromAmount\n}\n\nexport default function CommonCurrencyField(props: CommonCurrencyFieldProps) {\n  const {\n    id,\n    label,\n    setAmount,\n    setCurrency,\n    selectError,\n    selectCurrency,\n    selectAmount } = props;\n  const balance = useSelector(balanceSelector(selectCurrency));\n  const currencies = useSelector(selectCurrencies);\n  const currency = useSelector(selectCurrency);\n  const amount = useSelector(selectAmount);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  return (\n    <CurrencySelectInput\n      error={!!error}\n      id={id}\n      label={label}\n      currency={currency}\n      currencies={currencies}\n      amount={amount}\n      onBlur={ () => dispatch(format()) }\n      onChange={ _ => dispatch(setAmount(_)) }\n      onCurrencySet={ _ => dispatch(setCurrency(_)) }\n      helper={ error || 'You have ' + balance }\n      />\n  );\n}\n","import React from 'react';\n\nimport CommonCurrencyField from './CommonCurrencyField';\n\nimport {\n  setFrom,\n  setAmountFrom,\n  selectFromAmount,\n  selectFromIsError,\n  selectFromCurrency\n} from 'features/exchange/exchangeSlice';\n\nexport default function CurrencyFromField() {\n  return (\n    <CommonCurrencyField\n      id='send'\n      label='You send'\n      setAmount={setAmountFrom}\n      setCurrency={setFrom}\n      selectError={selectFromIsError}\n      selectCurrency={selectFromCurrency}\n      selectAmount={selectFromAmount}\n      />\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { RootState } from 'app/rootReducer';\nimport { idle, selectRejectinReason } from 'features/transaction/transactionSlice';\n\nexport default function TxNotification() {\n  const dispatch = useDispatch();\n  const tx = useSelector((state: RootState) => state.transaction.tx);\n  const confirmed = useSelector((state: RootState) =>\n    state.transaction.status === 'CONFIRMED' );\n  const rejected = useSelector((state: RootState) =>\n    state.transaction.status === 'REJECTED' );\n  const rejectedReason = useSelector(selectRejectinReason);\n  const open = confirmed || !!rejected;\n  const handleClose = () => dispatch(idle());\n  return ( \n    (tx && confirmed) || rejected\n     ? <Snackbar\n        autoHideDuration={2000}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        open={open}\n        onClose={handleClose}\n        message={ (tx && confirmed)\n          ? `You received ${tx.put.toFixed(2)} ${tx.to}`\n          : (rejectedReason || 'Rejected: unknown reason') }\n      />\n      : null\n  );\n}\n","import React from 'react';\n\nimport CommonCurrencyField from './CommonCurrencyField';\n\nimport {\n  setTo,\n  setAmountTo,\n  selectToAmount,\n  selectToCurrency,\n  selectToIsError\n} from 'features/exchange/exchangeSlice';\n\nexport default function CurrencyToField() {\n  return (\n    <CommonCurrencyField\n      id='receive'\n      label='You receive'\n      setAmount={setAmountTo}\n      setCurrency={setTo}\n      selectError={selectToIsError}\n      selectCurrency={selectToCurrency}\n      selectAmount={selectToAmount}\n      />\n  );\n}\n","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport Fab from '@material-ui/core/Fab';\n\nimport { selectBalances } from 'features/wallet/walletSlice';\nimport { tx, selectTxReady } from 'features/transaction/transactionSlice';\nimport {\n  selectTransaction,\n  selectReceiveAmount,\n  selectFromCurrency,\n  selectSendAmount,\n  fieldHasError\n} from 'features/exchange/exchangeSlice';\n\nconst selectAvailableBalance = createSelector(\n  selectFromCurrency,\n  selectSendAmount,\n  selectBalances,\n  (code, amount, wallet) => amount <= wallet[code] && amount > 0\n);\n\nconst isValidTxSelector = createSelector(\n  fieldHasError,\n  selectTxReady,\n  selectReceiveAmount,\n  selectAvailableBalance,\n  (error, txIdle, amount, hasFunds) => !error && txIdle && amount && hasFunds\n);\n\nexport default function ExchangeButton() {\n  const valid = useSelector(isValidTxSelector);\n  const transaction = useSelector(selectTransaction);\n  const dispatch = useDispatch();\n\n  const handleSubmit = () => dispatch( tx( transaction ) );\n\n  return (\n    <Fab\n      variant='extended'\n      color='primary'\n      disabled={!valid}\n      onClick={ handleSubmit }>\n      Exchange\n    </Fab>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createSelector } from '@reduxjs/toolkit';\nimport Chip from '@material-ui/core/Chip';\n\nimport { selectRates, refreshRates } from 'features/rates/ratesSlice';\nimport {\n  selectFromCurrency,\n  selectToCurrency\n} from 'features/exchange/exchangeSlice';\n\nconst selectActualRate = createSelector(\n  selectFromCurrency,\n  selectToCurrency,\n  selectRates,\n  (from, to, rates) => rates[from.concat(to)]\n);\n\nexport default function RatesWidget() {\n  const dispatch = useDispatch();\n  const fromCurrency = useSelector(selectFromCurrency);\n  const toCurrency = useSelector(selectToCurrency);\n  const rate = useSelector(selectActualRate);\n\n  useEffect(() => {\n    refreshRates(dispatch, fromCurrency, [toCurrency]);\n    const id = setInterval(\n      () => refreshRates(dispatch, fromCurrency, [toCurrency]),\n      10000\n    );\n    return () => clearInterval(id);\n  }, [dispatch, fromCurrency, toCurrency]);\n\n  return (\n    <Chip\n      variant='outlined'\n      color={ rate ? 'primary' : 'default' }\n      label={ rate\n        ? `1 ${fromCurrency} = ${rate.toFixed(4)} ${toCurrency}`\n        : 'loading...'\n      }\n    />\n  );\n}\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport CurrencyFromField from 'features/exchange/CurrencyFromField';\nimport TxNotification from 'features/transaction/TxNotification';\nimport CurrencyToField from 'features/exchange/CurrencyToField';\nimport ExchangeButton from 'features/exchange/ExchangeButton';\nimport RatesWidget from 'features/rates/RatesWidget';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center'\n  }\n}));\n\nexport default function CurrencyExchange() {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.paper}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n\n          <RatesWidget />\n\n        </Grid>\n        <Grid item xs={12} sm={6}>\n\n          <CurrencyFromField />\n\n        </Grid>\n        <Grid item xs={12} sm={6}>\n\n          <CurrencyToField />\n\n        </Grid>\n        <Grid item xs={12}>\n\n          <ExchangeButton />\n\n        </Grid>\n      </Grid>\n\n      <TxNotification />\n\n    </Paper>\n  );\n}\n","import React from 'react';\n\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport CurrencyExchange from './CurrencyExchange';\nimport './App.css';\n\nfunction App(): React.ReactElement {\n  return (\n    <React.Fragment>\n\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant='h6' >Currency Exchange</Typography>\n        </Toolbar>\n      </AppBar>\n\n     <Container component='main' maxWidth='md'>\n\n       <Typography variant='body1' color='textSecondary' component='p'>\n         Currency Exchange component made with React, Redux and Material UI.\n       </Typography>\n\n       <CurrencyExchange />\n\n     </Container>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport ratesReducer from 'features/rates/ratesSlice';\nimport walletReducer from 'features/wallet/walletSlice';\nimport exchangeReducer from 'features/exchange/exchangeSlice';\nimport transactionReducer from 'features/transaction/transactionSlice';\n\nconst rootReducer = combineReducers({\n  rates: ratesReducer,\n  wallet: walletReducer,\n  exchange: exchangeReducer,\n  transaction: transactionReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './app/store';\n\nimport './index.css';\n\nconst render = () => {\n  const App = require('./app/App').default;\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nrender();\n"],"sourceRoot":""}